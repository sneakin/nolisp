;;; -*- mode: Lisp; coding: utf-8-unix -*-

(require "assert")
(require "runtime/math")
(require "runtime/memory")

(defun test-ptr-long ()
  (with-allocation (a 16)
    (assert-equal (ptr-write-long 1234 a) (+ a *SIZEOF_LONG*))
    (assert-equal (ptr-read-long a) 1234)
    (assert-equal (ptr-write-long -1234 a) (+ a 4))
    (assert-equal (ptr-read-long a) -1234)))

(defun test-ptr-ulong ()
  (with-allocation (a 128)
                   (assert-equal (ptr-write-ulong #xABCD a) (+ a *SIZEOF_LONG*))
                   (assert-eq (ptr-read-ulong a) #xABCD)))

(defun test-ptr-byte ()
  (with-allocation (a 128)
                   (assert-equal (ptr-write-byte 123 a) (+ a 1))
                   (assert-equal (ptr-read-byte a) 123)
                   (assert-equal (ptr-write-byte -123 a) (+ a 1))
                   (assert-equal (ptr-read-byte a) -123)
                   (ptr-write-byte -34 (ptr-write-byte 34 (ptr-write-byte -12 (ptr-write-byte 12 a))))
                   (assert-equal (ptr-read-byte a) 12)
                   (assert-equal (ptr-read-byte (+ a 1)) -12)
                   (assert-equal (ptr-read-byte (+ a 2)) 34)
                   (assert-equal (ptr-read-byte (+ a 3)) -34)))

(defun test-ptr-ubyte ()
  (with-allocation (a 128)
                   (assert-equal (ptr-write-ubyte 245 a) (+ a 1))
                   (assert-equal (ptr-read-ubyte a) 245)
                   (ptr-write-ubyte #xDD (ptr-write-ubyte #xCC (ptr-write-ubyte #xBB (ptr-write-ubyte #xAA a))))
                   (assert-equal (ptr-read-ubyte a) #xAA)
                   (assert-equal (ptr-read-ubyte (+ a 1)) #xBB)
                   (assert-equal (ptr-read-ubyte (+ a 2)) #xCC)
                   (assert-equal (ptr-read-ubyte (+ a 3)) #xDD)))

(defun test-ptr-cmp ()
  (with-allocation (a 12)
    (assert (ptr-cmp a a 12)))
  (assert (ptr-cmp "Hello You" "Hello You" 8))
  (assert (ptr-cmp "Hello" "Hello" 6))
  (assert (not (ptr-cmp "Hello" "world" 6))))

(defun test-ptr-copy ()
  (with-allocation (a 32)
    (ptr-copy "Hello world" a 11)
    (assert (ptr-cmp a "Hello world" 11))
    (ptr-copy "ABCD" a 1)
    (assert-equal (ptr-read-ubyte a) #\A)))

(defun test-ptr-copy-overlap-down ()
  )

(defun test-ptr-copy-overlap-up ()
  )

(defun test-ptr-set ()
  )

(defun test-ptr-zero ()
  )

(defun test-memory ()
  (test-ptr-long)
  (test-ptr-ulong)
  (test-ptr-ubyte)
  (test-ptr-byte)
  (test-ptr-cmp)
  (test-ptr-copy)
  ;; (test-ptr-copy-down)
  ;; (test-ptr-set)
  ;; (test-ptr-zero)
  )

(run-test-suite test-memory/0)
