(defun test-flatten ()
  (assert-equal (nolisp:flatten '(1)) '(1))
  (assert-equal (nolisp:flatten '(1 2)) '(1 2))
  (assert-equal (nolisp:flatten '(1 (2 (3)))) '(1 2 3))
  (assert-equal (nolisp:flatten '(1 (2 (3) 4))) '(1 2 3 4))
  (assert-equal (nolisp:flatten '(a nil b)) '(a nil b))
  (assert-equal (nolisp:flatten '(1 (a nil b) 2)) '(1 a nil b 2)))

(defun test-clip-last ()
  (assert-values-equal (nolisp:clip-last '(1)) '(() 1))
  (assert-values-equal (nolisp:clip-last '(1 2)) '((1) 2))
  (assert-values-equal (nolisp:clip-last '(1 2 3)) '((1 2) 3)))

(defun test-nshift-left ()
  (let ((a '(1 2 3)))
    (assert-eq (nolisp:nshift-left a) a "uses the same space"))
  (assert-equal (nolisp:nshift-left '(1)) '(1))
  (assert-equal (nolisp:nshift-left '(1 2)) '(2 1))
  (assert-equal (nolisp:nshift-left '(1 2 3)) '(2 3 1))
  (assert-equal (nolisp:nshift-left '(1 2 3 4)) '(2 3 4 1)))

(defun test-shift-left ()
  (assert-equal (nolisp:shift-left '(1)) '(1))
  (assert-equal (nolisp:shift-left '(1 2)) '(2 1))
  (assert-equal (nolisp:shift-left '(1 2 3)) '(2 3 1))
  (assert-equal (nolisp:shift-left '(1 2 3 4)) '(2 3 4 1)))

(defun test-shift-right ()
  (assert-equal (nolisp:shift-right '(1)) '(1))
  (assert-equal (nolisp:shift-right '(1 2)) '(2 1))
  (assert-equal (nolisp:shift-right '(1 2 3)) '(3 1 2))
  (assert-equal (nolisp:shift-right '(1 2 3 4)) '(4 1 2 3)))

(defun test-list ()
  (test-flatten)
  (test-clip-last)
  (test-shift-left)
  (test-shift-right))
