(defun test-ifeq ()
  (assert-equal (funcall (nolisp:ifeq 3) 2) nil)
  (assert-equal (funcall (nolisp:ifeq 3) 3) t)
  (assert-equal (funcall (nolisp:ifeq :a) :b) nil)
  (assert-equal (funcall (nolisp:ifeq :a) :a) t))

(defun test-compose ()
  (assert-equal (funcall (nolisp:compose #'symbol-name #'string-downcase) 'HELLO)
		"hello")
  (assert-equal (funcall (nolisp:compose #'intern #'symbol-name #'string-downcase)
			 "HELLO")
		"hello"))

(defun test-partial-first ()
  (assert-equal (funcall (nolisp:partial-first #'- 3) 8) -5)
  (assert-equal (funcall (nolisp:partial-first #'- 3 2) 8) -7)
  (assert-equal (funcall (nolisp:partial-first #'- 3 2 -7) 8) 0)
  (assert-equal (funcall (nolisp:partial-first #'- 3 2 -7) 8 4 3) -7))

(defun test-partial-after ()
  (assert-equal (funcall (nolisp:partial-after #'- 3) 8) 5)
  (assert-equal (funcall (nolisp:partial-after #'- 3 2) 8) 3)
  (assert-equal (funcall (nolisp:partial-after #'- 3 2 1) 8) 2)
  (assert-equal (funcall (nolisp:partial-after #'- 3 2 1) 8 4 3) -5))

(defun test-fun ()
  (test-ifeq)
  (test-compose)
  (test-partial-first)
  (test-partial-after))
