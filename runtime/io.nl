;;; -*- mode: Lisp; coding: utf-8-unix -*-

(require "runtime/memory")
(require "runtime/eq")
(require "runtime/math")
(require "runtime/char")
(require "runtime/string")
(require "runtime/convertors")
(require "runtime/bc/io/output-dev")

#+:repl
(defvar *standard-output* 0)

(defun cformat-ptr (buffer-start str &optional a b c d e f g)
  (let ((percent (string-position #\% str)))
    (if (> percent -1)
        (let ((spec (downcase-char (string-aref str (+ 1 percent))))
              (buffer (- (ptr-write-string str buffer-start percent)
                         1)))
          (if (eq spec (char-code #\%))
              (cformat-ptr (ptr-write-ubyte #\% buffer)
                          (+ str percent 2) a b c d e f g)
              (cformat-ptr (cond
                            ((eq spec (char-code #\c)) (ptr-write-ubyte a buffer))
                            ((eq spec (char-code #\s)) (- (ptr-write-string a buffer) 1))
                            ((or (eq spec (char-code #\i))
                                 (eq spec (char-code #\d))) (multiple-value-bind (start ending)
                                                                (itoa a buffer 10)
                                                              (- ending 1)))
                            ((eq spec (char-code #\u)) (multiple-value-bind (start ending)
                                                           (itoa-unsigned a buffer 10)
                                                         (- ending 1)))
                            ((eq spec (char-code #\x)) (multiple-value-bind (start ending)
                                                           (itoa-unsigned a buffer 16)
                                                         (- ending 1)))
                            ((eq spec (char-code #\f)) (multiple-value-bind (start ending)
                                                           (ftoa a buffer 10)
                                                         (- ending 1)))
                            (t (multiple-value-bind (start ending)
                                   (itoa-unsigned a buffer 16)
                                 (- ending 1))))
                          (+ str percent 2) b c d e f g)))
        (ptr-write-ubyte 0 (ptr-write-string str buffer-start)))))

(defun cformat-lambda (fn str &optional a b c d e f g)
  (with-allocation (buffer 1024)
    (cformat-ptr buffer str a b c d e f g)
    (fn buffer)))

(defun cformat (stream str &optional a b c d e f g)
  (cformat-lambda output-dev-write/1 str a b c d e f g))


(defun format-ptr (buffer-start str &optional a b c d e f g)
  (let ((percent (string-position #\~ str)))
    (if (> percent -1)
        (let ((spec (downcase-char (string-aref str (+ 1 percent))))
              (buffer (- (ptr-write-string str buffer-start percent)
                         1)))
          (cond
            ((eq spec (char-code #\~))
             (format-ptr (ptr-write-ubyte #\~ buffer)
                         (+ str percent 2) a b c d e f g))
            ((eq spec (char-code #\%))
             (format-ptr (ptr-write-ubyte #\newline (ptr-write-ubyte #\return buffer))
                         (+ str percent 2) a b c d e f g))
            (t (format-ptr (cond
                             ((eq spec (char-code #\c)) (ptr-write-ubyte a buffer))
                             ((eq spec (char-code #\s)) (- (ptr-write-string a buffer) 1))
                             ((or (eq spec (char-code #\i))
                                  (eq spec (char-code #\d))) (multiple-value-bind (start ending)
                                                                 (itoa a buffer 10)
                                                               (- ending 1)))
                             ((eq spec (char-code #\u)) (multiple-value-bind (start ending)
                                                            (itoa-unsigned a buffer 10)
                                                          (- ending 1)))
                             ((eq spec (char-code #\x)) (multiple-value-bind (start ending)
                                                            (itoa-unsigned a buffer 16)
                                                          (- ending 1)))
                             ((eq spec (char-code #\f)) (multiple-value-bind (start ending)
                                                            (ftoa a buffer 10)
                                                          (- ending 1)))
                             (t (multiple-value-bind (start ending)
                                    (itoa-unsigned a buffer 16)
                                  (- ending 1))))
                           (+ str percent 2) b c d e f g))))
        (ptr-write-ubyte 0 (ptr-write-string str buffer-start)))))

(defun format-lambda (fn str &optional a b c d e f g)
  (with-allocation (buffer 1024)
    (format-ptr buffer str a b c d e f g)
    (fn buffer)))

(defun format (stream str &optional a b c d e f g)
  (format-lambda output-dev-write/1 str a b c d e f g))

